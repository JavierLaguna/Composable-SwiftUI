name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  fastlane:
    name: Run test using Fastlane
    runs-on: ${{ matrix.macos_version }}

    strategy:
      matrix:
        macos_version: [macos-15]
        xcode_version: ['16.2'] # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#xcode
        iphone_model: ['iPhone 16 Pro (18.2)']
        optional_steps: [false]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2

      - name: Install Bundler
        run: gem install bundler

      - name: Install dependencies
        run: bundle install

      # Optional: Check the Fastlane version
      - name: Check Fastlane version
        if: ${{ matrix.optional_steps }}
        run: bundle exec fastlane --version

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: ${{ matrix.xcode_version }}

      # Optional: List iOS available simulators
      - name: List the available simulators
        if: ${{ matrix.optional_steps }}
        run: xcrun simctl list devices

      - name: Set Xcode to Skip Macro Validation
        run: defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES

      - name: Run Fastlane
        env:
          DEVICE: ${{ matrix.iphone_model }}
        run: |
          export FASTLANE_XCODEBUILD_SETTINGS_RETRIES=10
          bundle exec fastlane test


      - name: Convert xccov to lcov
        run: |
          brew install xccov-to-lcov
          xccov-to-lcov --output-path coverage.lcov \
            $(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" | head -n 1)

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=JavierLaguna_Composable-SwiftUI
            -Dsonar.organization=javierlaguna
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.swift.coverage.reportPaths=coverage.lcov
            -Dsonar.sources=.

      # - name: Generate Coverage Report
      #   run: bundle exec fastlane generate_coverage_report

      # # Optional: List files generated in the coverage directory
      # - name: List coverage files
      #   if: ${{ matrix.optional_steps }}
      #   run: ls -la fastlane/test_output/coverage

      # # Upload the coverage file as an artifact so that the next job can use it
      # - name: Upload coverage report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: fastlane/test_output/coverage/sonarqube-generic-coverage.xml

  # sonarcloud:
  #   name: Upload coverage to SonarCloud
  #   runs-on: ubuntu-latest

  #   needs: fastlane  # This ensures that the build job finishes before executing this job

  #   strategy:
  #     matrix:
  #       optional_steps: [true]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Download coverage report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: fastlane/test_output/coverage/

  #     - name: List downloaded coverage files
  #       if: ${{ matrix.optional_steps }}
  #       run: ls -la fastlane/test_output/coverage/

  #     - name: Upload coverage to SonarCloud
  #       uses: sonarsource/sonarqube-scan-action@v5.2.0
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONARQUBE_SCANNER_DEBUG: true
